dcload 1.0.5 - a Dreamcast serial loader by <andrewk@napalm-x.com>

Features

* Compressed binary transfers (dc-tool supports loading elf, srec, and bin)
* PC I/O (read, write, etc to PC)
* Exception handler

Building

1. Edit Makefile.cfg for your system, and then run `make`

Installation

1. PC - run make install (installs dc-tool)
2. DC
   * Directly burn to disc: 
      a. `cd make-cd` 
      b. edit Makefile
      c. insert blank cd-r
      d. run `make` 
         If 1st_read.bin hasn't been built yet, this Makefile will build it
 or 
   * Create a CDI image to burn later (requires mkisofs and cdi4dc tools):
      a. `make -C ./host-src/misc` (build the lzo binary)
      b. `make -C ./target-src` (build the 1st_read.bin)
      c. `mkisofs -C 0,11702 -V dcload-serial -G ./make-cd/IP.BIN -joliet -rock -l -o temp.iso ./target-src/1st_read/1st_read.bin`
      d. `cdi4dc temp.iso dcload-serial.cdi`

Testing

1. `cd example-src`
2. `dc-tool-ser -x console-test` (tests some PC I/O)
3. `dc-tool-ser -x exception-test` (generates an exception)

KOS GDB-over-dcload

To run a GNU debugger session over the dcload connection:

1. Build/obtain an sh-elf targetted GNU debugger
2. Put a `gdb_init()` call somewhere in the startup area of your
   KOS-based program
3. Build your program with the `-g` GCC switch to include debugging info
4. Launch your program using `dc-tool-ser -g -x <prog.elf>`
5. Launch sh-elf-gdb and connect to the dc-tool using `target remote :2159`
6. Squash bugs 

Notes

* dcload and dc-tool (both IP and serial) are now maintained by the KOS
  team. Please join the KallistiOS list for help with these tools.
    http://sf.net/projects/cadcdev/
* Now compiles with gcc-3.4.1, Binutils-2.15, newlib-1.12.0
* Tested systems: Debian GNU/Linux 2.2; Gentoo/Linux 2.6.7; Cygwin;
  Mac OSX 10.3.5 (Panther); macOS 10.15.2 (Catalina)
* 1.56M and 500K baud now supported with the FTDI USB-Serial driver, 
  including the driver built into macOS 10.12 and above.
  Note: Works with the cheap and commonly available FT232RL USB-Serial boards
  as well as the, now outdated, FT232BM USB-Serial chip running at 6.144Mhz.
  e.g.:
    linux:  `dc-tool-ser -t /dev/usb/tts/0 -b 1500000 -x <sh-executable>`
    cygwin: `dc-tool-ser -t COM4 -b 500000 -x <sh-executable>`
    macOS:  `dc-tool-ser -t /dev/cu.usbserial-A50285BI -b 1500000 -x <sh-executable>`
* As of 1.0.4, little-endian byte order is enforced in the host so dc-tool
  should now run on big-endian systems like a Mac.
* As of 1.0.4, Changed cdrecord option -xa1 to -xa: i've made one too many
  softdrink coasters since the authors of this tool changed the meaning of
  that option.
* 115200 works fine for me. Apparently it doesn't for some people. 
* As of 1.0.3, serial speed is changed at runtime rather than compile time. 
* There is now a -e option that will enable an alternate 115200 (which 
  doesn't work for me). If it works for you, please email 
  andrewk@napalm-x.com, especially if it works better than the default 115200.
* Patches and improvements are welcome.

Modern MacOS Notes

* This was tested on Catalina 10.15.2 only, however it should work on pretty
  much any version of macOS. 
* Of course some sort of USB serial adapter must be used. The standard 
  FT232RL USB-Serial boards from China that are sold pretty much everywhere
  work great and are super cheap.
* Modern macOS supports the same speeds as the other platforms, currently 
  up to 1.56M baud (-b 1500000). This was tested using Catalina and an FT232RL.
* Compilation on macOS requires libelf, which can be easily installed using
  the Homebrew package manager (https://brew.sh): `brew install libelf`
* The static compilation option cannot be used on macOS due to the way GCC
  works on macOS. However, when building the standard dynamically linked build,
  only libSystem is linked (confirmed with `otool -L`) which is available on
  all macOS systems, so the binary should still be just as portable.


Legacy Mac OSX Notes (Outdated)

* This was tested on Panther 10.3.5 only. It may or may not work on any other
  version of OSX. YMMV.
* Of course some sort of USB serial must be used. Standard RS232 adapters
  work as does Axlen's USB coders' cable.
* OSX does *not* support non-standard baud rates, so speeds higher
  than 115200 currently do not work. This is due to a limitation in the
  IOSerialFamily kernel module so it can not be easily worked around at
  this time.
* Compilation on OSX requires libintl, which must be installed with Fink
  using the 'gettext' package. (Using 'fink' or 'apt-get' is fine).
    http://fink.sf.net/
* You may see duplicate symbol warnings at compile time, like _strncpy
  in libiberty.dylib. You can safely ignore these.

Credits

* Minilzo was written by Markus Oberhumer
* There are some various files from newlib-1.8.2 here, and video.s was written 
  by Marcus Comstedt.
* win32 porting and implementation of -t by Florian 'Proff' Schulze
* bugfix and implementation of -b by The Gypsy
* fixes for cygwin by Florian 'Proff' Schulze
* Minor initialization fix in dcload for gcc-3.4.x. Serial protocol endian
  fixes - Paul Boese a.k.a. Axlen
* Fixes for Mac OSX (and testing) by Dan Potter
* Fixes for libbfd segfaults by Atani 
* Tons of improvements and fixes by SiZiOUS (https://sizious.com)
* Modern macOS testing by Ben Baron a.k.a. einsteinx2
